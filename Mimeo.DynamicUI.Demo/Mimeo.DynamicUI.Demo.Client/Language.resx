<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="demogridoptionsviewmodel_useinlinesearch" xml:space="preserve">
    <value>Use Inline Search</value>
  </data>
  <data name="demogridoptionsviewmodel_useinlinesearch_desc" xml:space="preserve">
    <value>If enabled, the Radzen data grid UI will be used for filtering. If disabled, filters will be specified individually outside of the table.</value>
  </data>
  <data name="option2languagekey" xml:space="preserve">
    <value>Option 2</value>
  </data>
  <data name="subviewmodel_property1" xml:space="preserve">
    <value>Property 1</value>
  </data>
  <data name="subviewmodel_property1_desc" xml:space="preserve">
    <value>Sub view models can have property descriptions too!</value>
  </data>
  <data name="subviewmodel_property2" xml:space="preserve">
    <value>Property 2</value>
  </data>
  <data name="subviewmodel_property2_desc" xml:space="preserve">
    <value>Sub view models can have property descriptions too!</value>
  </data>
  <data name="testviewmodel_color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="testviewmodel_color_desc" xml:space="preserve">
    <value>A color picker control</value>
  </data>
  <data name="testviewmodel_combobox" xml:space="preserve">
    <value>Combo Box</value>
  </data>
  <data name="testviewmodel_combobox_desc" xml:space="preserve">
    <value>Similar to a single-select, but any value can be entered. Unlike single and multi-select, options cannot be translated since the raw value is arbitrary user input.</value>
  </data>
  <data name="testviewmodel_datetimeoffset" xml:space="preserve">
    <value>DateTime Offset</value>
  </data>
  <data name="testviewmodel_datetimeoffset_desc" xml:space="preserve">
    <value>Same as DateTime, but internally stored as a DateTimeOffset. Note that time zone information may be coerced to UTC but the value should remain correct.</value>
  </data>
  <data name="testviewmodel_datetimeutc" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="testviewmodel_datetimeutc_desc" xml:space="preserve">
    <value>An arbitrary date/time in UTC, but displayed in the user's local time zone.</value>
  </data>
  <data name="testviewmodel_decimal" xml:space="preserve">
    <value>Decimal</value>
  </data>
  <data name="testviewmodel_decimal_desc" xml:space="preserve">
    <value>An arbitrary decimal used to demonstrate the decimal form field</value>
  </data>
  <data name="testviewmodel_description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="testviewmodel_enabled" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="testviewmodel_enablehiddenproperties" xml:space="preserve">
    <value>Enable Hidden Properties</value>
  </data>
  <data name="testviewmodel_enablehiddenproperties_desc" xml:space="preserve">
    <value>When enabled or disabled, another form field is shown/hidden accordingly</value>
  </data>
  <data name="testviewmodel_hiddenstring" xml:space="preserve">
    <value>Hidden String</value>
  </data>
  <data name="testviewmodel_hiddenstring_desc" xml:space="preserve">
    <value>An ordinary string that's only visible when Enable Hidden Properties is checked</value>
  </data>
  <data name="testviewmodel_html" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="testviewmodel_id" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="testviewmodel_id_desc" xml:space="preserve">
    <value>Unique identifier of the test model</value>
  </data>
  <data name="testviewmodel_json" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="testviewmodel_modellist" xml:space="preserve">
    <value>Sub-model List</value>
  </data>
  <data name="testviewmodel_modellist_desc" xml:space="preserve">
    <value>A list of view model displayed in a grid</value>
  </data>
  <data name="testviewmodel_multiselect" xml:space="preserve">
    <value>Multi Select</value>
  </data>
  <data name="testviewmodel_multiselect_desc" xml:space="preserve">
    <value>A sample multi-select control</value>
  </data>
  <data name="testviewmodel_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="testviewmodel_nullablestringenabled" xml:space="preserve">
    <value>Nullable String</value>
  </data>
  <data name="testviewmodel_nullablestringenabled_desc" xml:space="preserve">
    <value>A boolean setting that enables or disabled an arbitrary form field, useful for values that are logically nullable or feature-switched</value>
  </data>
  <data name="testviewmodel_number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="testviewmodel_number_desc" xml:space="preserve">
    <value>An arbitrary integer used to demonstrate the number form field</value>
  </data>
  <data name="testviewmodel_relativedate" xml:space="preserve">
    <value>Relative Date</value>
  </data>
  <data name="testviewmodel_section" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="testviewmodel_section_desc" xml:space="preserve">
    <value>A group of related form fields, which are actually stored in their own view model.</value>
  </data>
  <data name="testviewmodel_singleselect" xml:space="preserve">
    <value>Single Select</value>
  </data>
  <data name="testviewmodel_singleselect_desc" xml:space="preserve">
    <value>A sample single-select control</value>
  </data>
  <data name="testviewmodel_stringlist" xml:space="preserve">
    <value>String List</value>
  </data>
  <data name="testviewmodel_stringlist_desc" xml:space="preserve">
    <value>A simple list of strings</value>
  </data>
  <data name="testviewmodel_stringlist_header" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="testviewmodel_time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="testviewmodel_relatedmodelid" xml:space="preserve">
    <value>Related Model</value>
  </data>
  <data name="testviewmodel_relatedmodelids" xml:space="preserve">
    <value>Related Models</value>
  </data>
  <data name="simplesubviewmodel_property1" xml:space="preserve">
    <value>Property 1</value>
  </data>
  <data name="simplesubviewmodel_property2" xml:space="preserve">
    <value>Property 2</value>
  </data>
  <data name="testviewmodel_simplemodellist" xml:space="preserve">
    <value>Simple Model List</value>
  </data>
  <data name="testviewmodel_advancedmodellist" xml:space="preserve">
    <value>Advanced Model List</value>
  </data>
  <data name="advancedsubviewmodel_property1" xml:space="preserve">
    <value>Property 1</value>
  </data>
  <data name="advancedsubviewmodel_property2" xml:space="preserve">
    <value>Property 2</value>
  </data>
  <data name="advancedsubviewmodel_sublist" xml:space="preserve">
    <value>Sub List</value>
  </data>
  <data name="advancedsubviewmodel_sublist_header" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="testviewmodel_customformfield" xml:space="preserve">
    <value>Custom Form Field</value>
  </data>
  <data name="testviewmodel_customformfield_desc" xml:space="preserve">
    <value>A demonstration of how to define a custom form field control in the client application.</value>
  </data>
</root>