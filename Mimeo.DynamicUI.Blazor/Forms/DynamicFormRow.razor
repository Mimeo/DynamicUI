@using System.Linq.Expressions
@using System.ComponentModel
@using Mimeo.DynamicUI.Extensions

@implements IDisposable

@{
    RenderFragment nameFragment = 
    @<div style="display:flex;">
        <RadzenIcon Icon="@(Collapsed ? "arrow_right" : "arrow_drop_down")" @onclick="@(() => Collapsed = !Collapsed)" Style="display:inline;cursor:pointer;" />
        <span title="@FormFieldDescription">@FormFieldName</span>
    </div>;
}

<div class="dynamic-form-row">
    @if (FormField?.IsVisible == true || For != null)
    {
        @if (Collapsed) 
        {
            <RadzenRow>
                <RadzenColumn>
                    @nameFragment
                </RadzenColumn>
            </RadzenRow>
        }
        else 
        {
            <RadzenRow>
                <RadzenColumn Size="3">
                    @nameFragment
                </RadzenColumn>
                <RadzenColumn Size="9">
                    @if (FieldTemplate != null)
                    {
                        @FieldTemplate
                    }
                    else
                    {
                        <DynamicField Class="@Class" FormField="FormField" For="For" ViewModel="ViewModel" CustomFormFieldTypes="CustomFormFieldTypes" />
                    }

                    @if (!string.IsNullOrEmpty(FormFieldDescription))
                    {
                        <span class="form-field-description">@FormFieldDescription</span>
                    }

                    @if (FormField?.ValidationProperty != null)
                    {
                        <ValidationMessage For="@FormField.ValidationProperty" />
                    }
                    else if (For != null)
                    {
                        <ValidationMessage For="@For" />
                    }
                </RadzenColumn>
            </RadzenRow>

        }
    }
</div>

@code {
    #pragma warning disable BL0007 // Component parameters should be auto properties
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (FormField != null)
        {
            FormField.PropertyChanged -= FormField_OnPropertyChanged; // Ensure we only have one handler (blazor can set parameters as side effects of the event handler)
            FormField.PropertyChanged += FormField_OnPropertyChanged;
        }
    }

    private void FormField_OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    [Parameter]
    public ViewModel? ViewModel { get; set; }

    [Parameter]
    public FormFieldDefinition? FormField { get; set; }

    [Parameter]
    public Expression<Func<object?>>? For { get; set; }

    [Parameter]
    public RenderFragment? FieldTemplate { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Collapsed 
    {
        get 
        {
            return _collapsed ?? FormField?.Collapsed ?? false;
        }
        set 
        {
            _collapsed = value;
        }
    }
    private bool? _collapsed;

    /// <summary>
    /// For form fields of type <see cref="FormFieldType.Custom"/>, a dictionary matching form field property language keys to controls that can display them.
    /// Controls must inherit <see cref="FormFieldBase{TValue}"/>.
    /// </summary>
    [Parameter]
    public Dictionary<string, Type> CustomFormFieldTypes { get; set; } = [];

    private string FormFieldName
    {
        get
        {
            if (FormField != null)
            {
                return lang.GetPropertyName(FormField);
            }
            else if (For != null)
            {
                return lang.GetPropertyName(For);
            }

            throw new InvalidOperationException("DynamicFormRow must have either a FormField or For parameter set");
        }
    }


    private string? FormFieldDescription
    {
        get
        {
            if (FormField != null)
            {
                return lang.GetPropertyDescription(FormField);
            }
            else if (For != null)
            {
                return lang.GetPropertyDescription(For);
            }

            return null;
        }
    }


    public void Dispose()
    {
        if (FormField != null)
        {
            FormField.PropertyChanged -= FormField_OnPropertyChanged;
        }
    }
#pragma warning restore BL0007
}
