@using System.ComponentModel
@using System.Linq.Expressions
@using Mimeo.DynamicUI.Extensions

@implements IDisposable

@if (FormField != null)
{
    <div class="mb-3 row">
        <CollapsableFieldset Visible="FormField.IsVisible" Collapsed="FormField.Collapsed">
            <HeaderTemplate>
                @lang.GetPropertyName(FormField)
            </HeaderTemplate>
            <ChildContent>
                <p class="form-field-description">@lang.GetPropertyDescription(FormField)</p>
                @if (ViewModel != null)
                {
                    foreach (var formField in ViewModel.GetEditForm().Values)
                    {
                        <DynamicFormRow FormField="@formField" ViewModel="ViewModel" CustomFormFieldTypes="CustomFormFieldTypes" />
                    }
                }
            </ChildContent>
        </CollapsableFieldset>
    </div>
}

@code {
    #pragma warning disable BL0007 // Component parameters should be auto properties
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (FormField != null)
        {
            FormField.PropertyChanged -= FormField_OnPropertyChanged; // Ensure we only have one handler (blazor can set parameters as side effects of the event handler)
            FormField.PropertyChanged += FormField_OnPropertyChanged;
        }
    }

    private void FormField_OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    [Parameter]
    public ViewModel? ViewModel { get; set; }

    [Parameter]
    public FormFieldDefinition? FormField { get; set; }

    /// <summary>
    /// For form fields of type <see cref="FormFieldType.Custom"/>, a dictionary matching form field property language keys to controls that can display them.
    /// Controls must inherit <see cref="FormFieldBase{TValue}"/>.
    /// </summary>
    [Parameter]
    public Dictionary<string, Type> CustomFormFieldTypes { get; set; } = [];

    public void Dispose()
    {
        if (FormField != null)
        {
            FormField.PropertyChanged -= FormField_OnPropertyChanged;
        }
    }
#pragma warning restore BL0007
}
