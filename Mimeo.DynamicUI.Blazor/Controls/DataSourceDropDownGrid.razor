@using System.Linq
@using Mimeo.DynamicUI.Blazor.Extensions
@using Mimeo.DynamicUI.Extensions

@typeparam TValue

@if (Multiple)
{
    <CustomRadzenDropDownDataGrid TValue="IEnumerable<TValue>" id="@Id" @ref="gridRefMulti"
    AllowClear="true" 
    Multiple="true" 
    Chips="true"
    SelectedValue="defaultSelectedItems"
    Value="Values" 
    ValueChanged="OnValuesChanged" 
    Data="gridItems"
    Count="gridCount"
    Placeholder="@Placeholder"
    LoadData="OnGridLoadData"
    ValueProperty="@nameof(GridItem.Value)"
    AllowFiltering="true" 
    OnOpenPopup="OnOpenPopup"
    Disabled="Disabled"
    Density="Density.Compact"
    IsLoading="isLoading"
    MaxSelectedLabels="@int.MaxValue"
    OnChipRemoveOverride="OnChipRemove">
        <ValueTemplate Context="Item">
            @GetViewModelNameByValue(Item.Value)
        </ValueTemplate>
        <Columns>
            <RadzenDropDownDataGridColumn Width="60px" Sortable="false">
                <Template Context="data">
                    <RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select item" }})" TriState="false" Value="@(Values != null && Values.Contains(GetViewModelValue(data.ListModel)))"
                    TValue="bool" Change=@(args => gridRefMulti!.SelectItem(data)) @onclick:stopPropagation />
                </Template>
            </RadzenDropDownDataGridColumn>
            @foreach (var formField in formFields ?? [])
            {
                <RadzenDropDownDataGridColumn
                Property="@formField.PropertyName"
                Type="@formField.PropertyType"
                Title="@(lang.GetPropertyName(formField))"
                Sortable="@formField.Sortable"
                SortOrder="@(formField.DefaultSortDirection switch {SortDirection.Ascending => SortOrder.Ascending, SortDirection.Descending => SortOrder.Descending, _ => null})"
                Filterable="@formField.Filterable">
                    <Template Context="item">
                        <DynamicField FormField="@item.ListModel.GetDropDownListForm()[formField.PropertyName]" ReadOnly="true" ViewModel="item.ListModel" CustomFormFieldTypes="CustomFormFieldTypes" />
                    </Template>
                </RadzenDropDownDataGridColumn>
            }
        </Columns>
    </CustomRadzenDropDownDataGrid>
}
else
{
    <CustomRadzenDropDownDataGrid TValue="TValue" id="@Id" @ref="gridRef"
    AllowClear="true" 
    Multiple="false"
    SelectedItem="@gridSelectedItem" 
    Value="Value" 
    ValueChanged="OnValueChanged" 
    Data="gridItems" 
    Count="gridCount" 
    Placeholder="@Placeholder"
    LoadData="OnGridLoadData"
    ValueProperty="@nameof(GridItem.Value)"
    AllowFiltering="true"
    OnOpenPopup="OnOpenPopup"
    Disabled="Disabled">
        <ValueTemplate Context="Item">
            @GetViewModelNameByValue(Item.Value)
        </ValueTemplate>
        <Columns>
            @foreach (var formField in formFields ?? [])
            {
                <RadzenDropDownDataGridColumn Property="@formField.PropertyName"
                                                Type="@formField.PropertyType"
                                                Title="@(lang.GetPropertyName(formField))"
                                                Sortable="@formField.Sortable"
                                                SortOrder="@(formField.DefaultSortDirection switch {SortDirection.Ascending => SortOrder.Ascending, SortDirection.Descending => SortOrder.Descending, _ => null})"
                                                Filterable="@formField.Filterable">
                    <Template Context="item">
                        <DynamicField FormField="@item.ListModel.GetDropDownListForm()[formField.PropertyName]" ReadOnly="true" ViewModel="item.ListModel" CustomFormFieldTypes="CustomFormFieldTypes" />
                    </Template>
                </RadzenDropDownDataGridColumn>
            }
        </Columns>
    </CustomRadzenDropDownDataGrid>
}
